<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
         PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
         "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="kr.co.pms.mapper.UserMapper">
    
    <select id="getData" parameterType="kr.co.pms.model.LoginInfo" resultType="kr.co.pms.model.UserInfo">
    
    SELECT * FROM MEMBER WHERE ID = #{userID} AND PASSWORD = #{userPassword}
            
    </select>
    
    <update id="encryptSha512" parameterType="kr.co.pms.model.UserInfo">
        
        UPDATE MEMBER SET PASSWORD = #{ password }
        WHERE UIDX = #{ uidx }
        
    </update>
    
    <select id="getUserList" resultType="kr.co.pms.model.UserInfo">
    
    SELECT * FROM MEMBER
            
    </select>
    
    <select id="getUserListP" parameterType="kr.co.pms.model.Pagination" resultType="kr.co.pms.model.UserInfo">
        SELECT *
		FROM 
		    (SELECT  /*+ index_desc(t PK_USERS) */ t.*, rownum as rnum
		    FROM member t)
		WHERE rnum BETWEEN #{start} AND #{end}
    </select>
    
    <select id="getAllRownum" resultType="int">
        
        Select COUNT(*) AS total
        From Member
        
    </select>
    
    <select id="getRequest" resultType="kr.co.pms.model.UserInfo">
    
    SELECT * FROM REG_QUEUE
            
    </select>
    
     <insert id="approveRequest" parameterType="int">
        INSERT INTO MEMBER
        SELECT * FROM REG_QUEUE WHERE UIDX = #{uidx}
    </insert>
    
    <delete id="deleteRequest" parameterType="int">
        DELETE FROM REG_QUEUE
        WHERE UIDX = #{uidx}
    </delete>
    
    <update id="updateUpdate" parameterType="int">
        UPDATE MEMBER SET UP_DATE=SYSDATE
        WHERE UIDX = #{uidx}
    </update>
    
    <select id="getUser" parameterType="int" resultType="kr.co.pms.model.UserInfo2">
    
    	SELECT * FROM MEMBER WHERE UIDX = #{uidx}
            
    </select>
    
    <insert id="createAccount" parameterType="kr.co.pms.model.UserInfo">
        INSERT INTO REG_QUEUE (UIDX, ID, PASSWORD, NAME, BIRTH_DATE, SERIAL_NUM, SCHOOLING, LEVELS, ENTRY_DATE, REG_DATE, UP_DATE) 
        VALUES (#{uidx}, #{id}, #{password}, #{name}, to_date(#{birth_Date}), #{serial_Num}, #{schooling}, #{levels}, to_timestamp(#{entry_Date}), SYSDATE, SYSDATE)
    </insert>
    
    <select id='getSequence' resultType="int">
        SELECT SEQ_UID.NEXTVAL from dual
    </select>
    
</mapper>

