<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pms.mapper.ProjectMapper">
    
    <select id="getCompanyList" resultType="kr.co.pms.model.Company">
    
    SELECT * FROM COMPANY
            
    </select>
    
    <insert id="addCompany" parameterType="kr.co.pms.model.Company">
        
        INSERT INTO COMPANY (CIDX, NAMEEN, NAMEOTHER)
        VALUES (#{cIdx}, #{nameEn}, #{nameOther})
        
    </insert>
    
    <select id='getDocSequence' resultType="int">
        SELECT DOCUMENT_SEQ.NEXTVAL from dual
    </select>
    
    <select id='getProSequence' resultType="int">
        SELECT PROJECT_SEQ.NEXTVAL from dual
    </select>
    
    <insert id="addProject" parameterType="kr.co.pms.model.Project">
        
        INSERT INTO PROJECT ( PID, NAME, STARTDATE, ENDDATE, ORDERER, MANAGER, STATUS, REQUIREMAN, REG_DATE, UP_DATE)
        VALUES ( #{pid}, #{name}, to_timestamp(#{startDate}), to_timestamp(#{endDate}), #{orderer}, #{manager}, #{status}, #{requireMan}, SYSDATE, SYSDATE)
        
    </insert>
    
    <insert id="addApproval" parameterType="kr.co.pms.model.Document">
        
        INSERT INTO APPROVAL ( DID, PID, DRAFTER, SUPERIOR, LIMITS, DESCRIPTION, REG_DATE, UP_DATE)
        VALUES (#{did}, #{pid}, #{drafter}, #{superior}, to_timestamp(#{limits}), #{description}, SYSDATE, SYSDATE)
        
    </insert>
    
    <insert id="addApprovalHistory" parameterType="kr.co.pms.model.Document">
        
        INSERT INTO APPROVAL_HISTORY ( DID, STATUS, REPLY, REG_DATE, UP_DATE)
        VALUES (#{did}, #{status}, #{reply}, SYSDATE, SYSDATE)
        
    </insert>
    
    <select id="getDocumentEmp" parameterType="int" resultType="kr.co.pms.model.Document">
        
        select d.*, m.name superiorName
		from (
		  select a.*, m.name drafterName
		  from (
		  	select * from APPROVAL where Drafter = #{ drafter }
		  ) a, Member m
		  where a.Drafter = m.uidx
		) d, Member m
		where d.superior = m.uidx
        
    </select>
    
    <select id="getDocumentExe" parameterType="int" resultType="kr.co.pms.model.Document">
        
        select d.*, m.name superiorName
		from (
		  select a.*, m.name drafterName
		  from (
		  	select * from APPROVAL where superior = #{ superior }
		  ) a, Member m
		  where a.Drafter = m.uidx
		) d, Member m
		where d.superior = m.uidx
        
    </select>
    
    <select id="getProject" parameterType="String" resultType="kr.co.pms.model.Project">
        
		with setOrderer as (
		  select p.*, c.NameOther as OrdererName
		  from Project p, Company c
		  where p.orderer = c.cidx
		  AND p.pid = #{ pid }
		)
		 select m.*, c.MeaningKor as Meaning
		 from (select o.*, m.name as ManagerName
		  from setOrderer o, Member m
		  where o.manager = m.uidx) m, codes c
		  where m.status = c.codename
        
    </select>
    
    <select id="getApprovalHistory" parameterType="String" resultType="kr.co.pms.model.ApprovalHistory">
        
		SELECT h.*, c.MEANINGKOR
		FROM (
			SELECT * 
			FROM(
			  SELECT * FROM APPROVAL_HISTORY
			  WHERE DID = #{ did }
			  ORDER BY UP_DATE DESC
			) 
			WHERE ROWNUM = 1) h, CODES c
		WHERE h.STATUS = c.CODENAME
        
    </select>
    
    <select id="getProgressProjects" resultType="kr.co.pms.model.Project">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
			AND p.status = 'P'
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getEndProject" resultType="kr.co.pms.model.Project">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
			AND p.status = 'SP'
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getAllProject" resultType="kr.co.pms.model.Project">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getProjectMembers" resultType="kr.co.pms.model.ProjectHistory">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getProjectsPM" parameterType="int" resultType="kr.co.pms.model.Project">
        
		with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
			AND p.manager = #{ uidx }
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
        
    </select>
    
    <select id="getProgressProjectsPM" parameterType="int" resultType="kr.co.pms.model.Project">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
			AND p.status = 'P'
			AND p.manager = #{ uidx }
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getEndProjectPM" parameterType="int" resultType="kr.co.pms.model.Project">
        
        with setOrderer as (
			select p.*, c.NameOther as OrdererName
			from Project p, Company c
			where p.orderer = c.cidx
			AND p.status = 'SP'
			AND p.manager = #{ uidx }
		)
		select m.*, c.MeaningKor as Meaning
		from (
			select o.*, m.name as ManagerName
			from setOrderer o, Member m
			where o.manager = m.uidx
		) m, codes c
		where m.status = c.codename
		  
    </select>
    
    <select id="getProjectPM" parameterType="String" resultType="kr.co.pms.model.Project">
        
		with setOrderer as (
		  select p.*, c.NameOther as OrdererName
		  from Project p, Company c
		  where p.orderer = c.cidx
		  AND p.pid = #{ pid }
		)
		 select m.*, c.MeaningKor as Meaning
		 from (select o.*, m.name as ManagerName
		  from setOrderer o, Member m
		  where o.manager = m.uidx) m, codes c
		  where m.status = c.codename
        
    </select>
    
    <select id="getEnteredMembers" parameterType="String" resultType="kr.co.pms.model.ProjectHistory">
        
        with setUname as (
		  select p.*, m.name as uname
			from Project_history p, Member m
			where p.uidx = m.uidx
			AND p.pid = #{ pid }
			and out_date is null
		)
		 select m.*, p.name as pName
		 from (select n.*, c.MeaningKor as positionName
		  from setUname n, codes c
		  where n.position = c.codename) m, project p
		  where m.pid = p.pid
        
    </select>
    
    <select id="getfreeMembers" resultType="kr.co.pms.model.UserInfo">
        
        select *
        from Member
        where uidx not in ( 
       		select uidx
       		from project_history
       		where in_date 
       		<![CDATA[
       		< 
       		]]>
       		SYSDATE
       		and out_date is null
        ) and levels = 'EMPLOYEE'
        
    </select>
    
    <select id="getDocument" parameterType="String" resultType="kr.co.pms.model.Document">
        
		select * from Approval
		where did = #{ did }
        
    </select>
    
    <insert id="setStatusApproval" parameterType="kr.co.pms.model.ApprovalHistory" >
        
        insert into approval_history ( DID, STATUS, REPLY, REG_DATE, UP_DATE)
        VALUES ( #{ did }, #{ status }, #{ reply }, SYSDATE, SYSDATE )
        
    </insert>
    
    <update id="setStatusProject" parameterType="kr.co.pms.model.Project">
        
        update project
        set status = #{ status }, up_date = SYSDATE
        where pid = #{ pid }
        
    </update>
    
    <insert id="putEmp" parameterType="kr.co.pms.model.ProjectHistory">
        
        INSERT INTO project_history (PID, UIDX, POSITION, IN_DATE, REG_DATE, UP_DATE)
        VALUES (#{pid}, #{ uidx }, #{ position }, SYSDATE, SYSDATE, SYSDATE)
        
    </insert>
    
    <select id="getEval" parameterType="kr.co.pms.model.Evaluation" resultType="kr.co.pms.model.Evaluation">
        
        select ep.*, m.name as uName
        from (
	        select e.*, p.name as pName
	        from evaluation e, project p
	        where e.pid = #{ pid }
	        and e.uidx = #{ uidx }
	        and e.type1 = #{ type1 }
	        and e.type2 = #{ type2 }
	        and e.pid = p.pid 
        ) ep, Member m
        where ep.uidx = m.uidx
        
    </select>
    
    <select id="getEnteredHistory" parameterType="String" resultType="kr.co.pms.model.ProjectHistory">
        
        with setUname as (
		  select p.*, m.name as uname
			from Project_history p, Member m
			where p.uidx = m.uidx
			AND p.pid = #{ pid }
		)
		 select m.*, p.name as pName
		 from (select n.*, c.MeaningKor as positionName
		  from setUname n, codes c
		  where n.position = c.codename) m, project p
		  where m.pid = p.pid
        
    </select>
    
    <select id="getUserInfo" parameterType="int" resultType="kr.co.pms.model.UserInfo">
        
        select *
        from member
        where uidx = #{ uidx }
        
    </select>
    
    <insert id="addEvaluation" parameterType="kr.co.pms.model.Evaluation">
        
        INSERT INTO evaluation ( PID, UIDX, TYPE1, TYPE2, VALUER, DESCRIPTION, RATING, REG_DATE, UP_DATE)
        VALUES (#{ pid }, #{ uidx }, #{ type1 }, #{ type2 }, #{ valuer }, #{ description }, #{ rating }, SYSDATE, SYSDATE)
        
    </insert>
    
    <update id="updateEvaluation" parameterType="kr.co.pms.model.Evaluation">
        
        update evaluation
        set rating = #{ rating }, description = #{ description }, up_date = SYSDATE
        where pid = #{ pid }
	    and uidx = #{ uidx }
	    and type1 = #{ type1 }
	    and type2 = #{ type2 }
        
    </update>
    
</mapper>